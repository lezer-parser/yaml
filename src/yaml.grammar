@top Stream { Document? (DocEnd Document?)* }

Document {
  Directive* DirectiveEnd? element+ |
  Directive+ DirectiveEnd? element*
}

value {
  valueAtom |
  BlockSequence |
  BlockMapping
}

valueAtom {
  QuotedLiteral |
  Literal |
  FlowSequence |
  FlowMapping
}

element {
  (Tag Anchor? | Anchor Tag?)? value | Alias
}

elementAtom {
  (Tag Anchor? | Anchor Tag?)? valueAtom | Alias
}

FlowSequence { "[" (elementAtom ",")* elementAtom? "]" }
FlowMapping { "{" (elementAtom ":" elementAtom ",")* elementAtom? "}" }

BlockSequence {
  Item { sequenceStartMark element? }
  Item { sequenceContinueMark element? }*
  blockEnd
}

BlockMapping {
  Pair { mapStartMark elementAtom ":" element? | explicitMapStartMark element? (":" element)? }
  Pair { mapContinueMark elementAtom ":" element? | explicitMapContinueMark element? (":" element)? }*
  blockEnd
}

@skip { whitespace | linebreak | Comment }

@context indentation from "./tokens.js"

@external tokens newlines from "./tokens.js" {
  blockEnd,
  DirectiveEnd,
  DocEnd
}

@external tokens blockMark from "./tokens.js" {
  sequenceStartMark[@name="-"]
  sequenceContinueMark[@name="-"]
  explicitMapStartMark[@name="?"]
  explicitMapContinueMark[@name="?"]
  mapStartMark
  mapContinueMark
}

@external tokens literals from "./tokens.js" {
  Literal[isolate]
  QuotedLiteral[isolate]
  Anchor
  Alias
  Tag
}

@tokens {
  whitespace { $[ \t]+ }
  linebreak { $[\n\r] }
  Directive { "%" ![\n]* }
  Comment { "#" ![\n]* }

  "["[@export=BracketL] "]"
  "{"[@export=BraceL] "}"
}

@detectDelim
