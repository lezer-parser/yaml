@top Stream { DocEnd? Document (DocEnd (!continue Document)? | directiveDocument)* }

@precedence { continue }

Document {
  DirectiveEnd element? |
  DirectiveEnd? element |
  Directive+ DirectiveEnd element?
}

directiveDocument[@name=Document] {
  DirectiveEnd element? |
  Directive+ DirectiveEnd element?
}

value {
  valueAtom |
  BlockSequence |
  BlockMapping |
  BlockLiteral
}

valueAtom {
  QuotedLiteral |
  Literal |
  FlowSequence |
  FlowMapping
}

element {
  value |
  Properties { (Tag Anchor? | Anchor Tag?) value? } |
  Alias
}

elementAtom {
  valueAtom |
  Properties { (Tag Anchor? | Anchor Tag?) valueAtom? } |
  Alias
}

flowSeqElement[@name=Item] {
  elementAtom |
  FlowMapping {
    Pair {
      elementAtom? ":" elementAtom? |
      flowMapMark (elementAtom? ":" elementAtom?)?
    }
  }
}

FlowSequence { "[" (flowSeqElement ",")* flowSeqElement? "]" }

flowPair[@name=Pair] {
  elementAtom (":" elementAtom?)? |
  ":" elementAtom? |
  flowMapMark (elementAtom? ":" elementAtom?)?
}

FlowMapping { "{" (flowPair ",")* flowPair? "}" }

BlockSequence {
  Item { sequenceStartMark element? }
  Item { sequenceContinueMark element? }*
  blockEnd
}

BlockMapping {
  Pair { mapStartMark elementAtom ":" element? | explicitMapStartMark element? (":" element)? }
  Pair { mapContinueMark elementAtom ":" element? | explicitMapContinueMark element? (":" element)? }*
  blockEnd
}

@skip {} {
  BlockLiteral {
    BlockLiteralHeader whitespace? Comment? linebreak BlockLiteralContent
  }
}

@skip { whitespace | linebreak | Comment }

@context indentation from "./tokens.js"

@external tokens newlines from "./tokens.js" {
  blockEnd,
  DirectiveEnd,
  DocEnd
}

@external tokens blockMark from "./tokens.js" {
  sequenceStartMark[@name="-"]
  sequenceContinueMark[@name="-"]
  explicitMapStartMark[@name="?"]
  explicitMapContinueMark[@name="?"]
  flowMapMark[@name="?"]
  mapStartMark
  mapContinueMark
}

@external tokens literals from "./tokens.js" {
  Literal[isolate]
  QuotedLiteral[isolate]
  Anchor
  Alias
  Tag
}

@external tokens blockLiteral from "./tokens.js" {
  BlockLiteralContent
}

@tokens {
  whitespace { $[ \t]+ }
  linebreak { $[\n\r] }
  Directive { "%" ![\n]* }
  Comment { "#" ![\n]* }

  indentationIndicator { $[1-9] }
  chompingIndicator { $[+-] }
  BlockLiteralHeader {
    ("|" | ">")
    (indentationIndicator chompingIndicator? | chompingIndicator indentationIndicator?)?
  }

  "["[@export=BracketL] "]"
  "{"[@export=BraceL] "}"
  ":"
}

@detectDelim
